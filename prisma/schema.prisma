// Prisma schema for FitnessMomentum

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // Local development uses a file-based SQLite DB.
  // Set DATABASE_URL="file:./dev.db" in .env or .env.local
  url      = env("DATABASE_URL")
}

// (SQLite) Replaced enums with plain String fields validated at app layer.

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  emailVerified   DateTime?        @map("email_verified")
  name            String?
  passwordHash    String?          @map("password_hash")
  image           String?
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  profile         Profile?
  // NextAuth relations
  accounts        Account[]
  sessions        Session[]
  // Domain relations
  workoutSessions WorkoutSession[]
  workoutTemplates WorkoutTemplate[]
  bodyMetrics     BodyMetric[]
  personalRecords PersonalRecord[]
  meals           Meal[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// NextAuth Session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id          String      @id @default(cuid())
  userId      String      @unique @map("user_id")
  heightCm    Float?      @map("height_cm")
  weightKg    Float?      @map("weight_kg")
  goal        String?
  unitSystem  String      @default("METRIC") @map("unit_system")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Exercise {
  id            String           @id @default(cuid())
  name          String
  category      String
  description   String?
  primaryMuscle String?          @map("primary_muscle")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  templates     WorkoutExercise[]
  workoutSets   WorkoutSet[]
  personalRecords PersonalRecord[]

  @@unique([name, category])
}

model WorkoutTemplate {
  id          String           @id @default(cuid())
  userId      String?          @map("user_id")
  name        String
  description String?
  isPublic    Boolean          @default(false) @map("is_public")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  exercises   WorkoutExercise[]
  user        User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WorkoutExercise {
  id                String          @id @default(cuid())
  workoutTemplateId String          @map("workout_template_id")
  exerciseId        String          @map("exercise_id")
  order             Int
  prescribedSets    Int?            @map("prescribed_sets")
  prescribedReps    Int?            @map("prescribed_reps")
  notes             String?
  workoutTemplate   WorkoutTemplate @relation(fields: [workoutTemplateId], references: [id], onDelete: Cascade)
  exercise          Exercise        @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([workoutTemplateId, exerciseId, order])
}

model WorkoutSession {
  id            String       @id @default(cuid())
  userId        String       @map("user_id")
  startedAt     DateTime     @default(now()) @map("started_at")
  endedAt       DateTime?    @map("ended_at")
  notes         String?
  totalVolume   Int?         @map("total_volume")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  sets          WorkoutSet[]

  @@index([userId, startedAt])
}

model WorkoutSet {
  id              String         @id @default(cuid())
  workoutSessionId String        @map("workout_session_id")
  exerciseId       String        @map("exercise_id")
  setNumber        Int           @map("set_number")
  reps             Int
  weight           Float?
  rpe              Float?
  createdAt        DateTime      @default(now()) @map("created_at")
  workoutSession   WorkoutSession @relation(fields: [workoutSessionId], references: [id], onDelete: Cascade)
  exercise         Exercise      @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([workoutSessionId, setNumber, exerciseId])
}

model BodyMetric {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  recordedAt  DateTime @default(now()) @map("recorded_at")
  weightKg    Float?   @map("weight_kg")
  waistCm     Float?   @map("waist_cm")
  chestCm     Float?   @map("chest_cm")
  hipsCm      Float?   @map("hips_cm")
  bodyFatPct  Float?   @map("body_fat_pct")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, recordedAt])
}

model PersonalRecord {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  exerciseId  String   @map("exercise_id")
  value       Float
  unit        String
  achievedAt  DateTime @default(now()) @map("achieved_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise    Exercise  @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([userId, exerciseId, unit])
}

model Meal {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  name       String
  calories   Int
  protein    Float
  carbs      Float
  fats       Float
  consumedAt DateTime @default(now()) @map("consumed_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, consumedAt])
}
